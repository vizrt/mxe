diff -r 50cd330f1558 -r e9eb0a5a27ba libavformat/movenc.c
--- a/libavformat/movenc.c	Tue Jul 18 16:08:07 2017 +0200
+++ b/libavformat/movenc.c	Tue Jul 18 16:08:08 2017 +0200
@@ -78,6 +78,9 @@
     { "frag_size", "Maximum fragment size", offsetof(MOVMuxContext, max_fragment_size), AV_OPT_TYPE_INT, {.i64 = 0}, 0, INT_MAX, AV_OPT_FLAG_ENCODING_PARAM},
     { "ism_lookahead", "Number of lookahead entries for ISM files", offsetof(MOVMuxContext, ism_lookahead), AV_OPT_TYPE_INT, {.i64 = 0}, 0, INT_MAX, AV_OPT_FLAG_ENCODING_PARAM},
     { "video_track_timescale", "set timescale of all video tracks", offsetof(MOVMuxContext, video_track_timescale), AV_OPT_TYPE_INT, {.i64 = 0}, 0, INT_MAX, AV_OPT_FLAG_ENCODING_PARAM},
+    { "movie_timescale", "set the movie timescale (in the mvhd atom)", offsetof(MOVMuxContext, movie_timescale), AV_OPT_TYPE_INT, {.i64 = DEFAULT_MOV_TIMESCALE}, 1, INT_MAX, AV_OPT_FLAG_ENCODING_PARAM},
+    { "vendor", "4-character value of vendor field in video sample description", offsetof(MOVMuxContext, vendor), AV_OPT_TYPE_STRING, {.str = "FFMP"}, 0, 0, AV_OPT_FLAG_ENCODING_PARAM },
+    { "target_chunk_size", "set the target chunk size in MiB", offsetof(MOVMuxContext, target_chunk_size), AV_OPT_TYPE_INT, {.i64 = 1}, 1, 2048, AV_OPT_FLAG_ENCODING_PARAM},
     { "brand",    "Override major brand", offsetof(MOVMuxContext, major_brand),   AV_OPT_TYPE_STRING, {.str = NULL}, .flags = AV_OPT_FLAG_ENCODING_PARAM },
     { "use_editlist", "use edit list", offsetof(MOVMuxContext, use_editlist), AV_OPT_TYPE_INT, {.i64 = -1}, -1, 1, AV_OPT_FLAG_ENCODING_PARAM},
     { "fragment_index", "Fragment number of the next fragment", offsetof(MOVMuxContext, fragments), AV_OPT_TYPE_INT, {.i64 = 1}, 1, INT_MAX, AV_OPT_FLAG_ENCODING_PARAM},
@@ -1676,6 +1679,7 @@
 {
     int64_t pos = avio_tell(pb);
     char compressor_name[32] = { 0 };
+    const AVCodecDescriptor *codec_desc = NULL;
     int avid = 0;
 
     avio_wb32(pb, 0); /* size */
@@ -1687,14 +1691,19 @@
     avio_wb16(pb, 0); /* Codec stream version */
     avio_wb16(pb, 0); /* Codec stream revision (=0) */
     if (track->mode == MODE_MOV) {
-        ffio_wfourcc(pb, "FFMP"); /* Vendor */
-        if (track->enc->codec_id == AV_CODEC_ID_RAWVIDEO) {
-            avio_wb32(pb, 0); /* Temporal Quality */
+        ffio_wfourcc(pb, track->mov->vendor); /* Vendor */
+        codec_desc = avcodec_descriptor_get( track->enc->codec_id );
+        if (codec_desc && codec_desc->props & AV_CODEC_PROP_INTRA_ONLY)
+            avio_wb32(pb, 0); /* Temporal Quality = no temp. compression */
+        else
+            avio_wb32(pb, 0x200); /* Temporal Quality = normal */
+
+        if (track->enc->codec_id == AV_CODEC_ID_RAWVIDEO)
             avio_wb32(pb, 0x400); /* Spatial Quality = lossless*/
-        } else {
-            avio_wb32(pb, 0x200); /* Temporal Quality = normal */
+        else if (track->enc->codec_id == AV_CODEC_ID_PRORES)
+            avio_wb32(pb, 0x3FF); /* Spatial Quality = very high*/
+        else
             avio_wb32(pb, 0x200); /* Spatial Quality = normal */
-        }
     } else {
         avio_wb32(pb, 0); /* Reserved */
         avio_wb32(pb, 0); /* Reserved */
@@ -2309,7 +2318,7 @@
 static int mov_write_tkhd_tag(AVIOContext *pb, MOVMuxContext *mov,
                               MOVTrack *track, AVStream *st)
 {
-    int64_t duration = av_rescale_rnd(track->track_duration, MOV_TIMESCALE,
+    int64_t duration = av_rescale_rnd(track->track_duration, track->mov->movie_timescale,
                                       track->timescale, AV_ROUND_UP);
     int version = duration < INT32_MAX ? 0 : 1;
     int flags   = MOV_TKHD_FLAG_IN_MOVIE;
@@ -2444,7 +2453,7 @@
 static int mov_write_edts_tag(AVIOContext *pb, MOVMuxContext *mov,
                               MOVTrack *track)
 {
-    int64_t duration = av_rescale_rnd(track->track_duration, MOV_TIMESCALE,
+    int64_t duration = av_rescale_rnd(track->track_duration, track->mov->movie_timescale,
                                       track->timescale, AV_ROUND_UP);
     int version = duration < INT32_MAX ? 0 : 1;
     int entry_size, entry_count, size;
@@ -2463,7 +2472,7 @@
         }
     }
 
-    delay = av_rescale_rnd(start_dts + start_ct, MOV_TIMESCALE,
+    delay = av_rescale_rnd(start_dts + start_ct, track->mov->movie_timescale,
                            track->timescale, AV_ROUND_DOWN);
     version |= delay < INT32_MAX ? 0 : 1;
 
@@ -2499,7 +2508,7 @@
          * special meaning. Normally start_ct should end up positive or zero
          * here, but use FFMIN in case dts is a a small positive integer
          * rounded to 0 when represented in MOV_TIMESCALE units. */
-        av_assert0(av_rescale_rnd(start_dts, MOV_TIMESCALE, track->timescale, AV_ROUND_DOWN) <= 0);
+        av_assert0(av_rescale_rnd(start_dts, track->mov->movie_timescale, track->timescale, AV_ROUND_DOWN) <= 0);
         start_ct  = -FFMIN(start_dts, 0);
         /* Note, this delay is calculated from the pts of the first sample,
          * ensuring that we don't reduce the duration for cases with
@@ -2732,7 +2741,7 @@
     for (i = 0; i < mov->nb_streams; i++) {
         if (mov->tracks[i].entry > 0 && mov->tracks[i].timescale) {
             int64_t max_track_len_temp = av_rescale_rnd(mov->tracks[i].track_duration,
-                                                MOV_TIMESCALE,
+                                                mov->movie_timescale,
                                                 mov->tracks[i].timescale,
                                                 AV_ROUND_UP);
             if (max_track_len < max_track_len_temp)
@@ -2761,7 +2770,7 @@
         avio_wb32(pb, mov->time); /* creation time */
         avio_wb32(pb, mov->time); /* modification time */
     }
-    avio_wb32(pb, MOV_TIMESCALE);
+    avio_wb32(pb, mov->movie_timescale);
     (version == 1) ? avio_wb64(pb, max_track_len) : avio_wb32(pb, max_track_len); /* duration of longest track */
 
     avio_wb32(pb, 0x00010000); /* reserved (preferred rate) 1.0 = normal */
@@ -3187,7 +3196,7 @@
     trk->chunkCount = 1;
     for (i = 1; i<trk->entry; i++){
         if (chunk->pos + chunkSize == trk->cluster[i].pos &&
-            chunkSize + trk->cluster[i].size < (1<<20)){
+            chunkSize + trk->cluster[i].size < (trk->mov->target_chunk_size<<20)){
             chunkSize             += trk->cluster[i].size;
             chunk->samples_in_chunk += trk->cluster[i].entries;
         } else {
@@ -4694,7 +4703,7 @@
 
     track->mode = mov->mode;
     track->tag = MKTAG('t','e','x','t');
-    track->timescale = MOV_TIMESCALE;
+    track->timescale = mov->movie_timescale;
     track->enc = avcodec_alloc_context3(NULL);
     if (!track->enc)
         return AVERROR(ENOMEM);
@@ -4755,8 +4764,8 @@
         AVChapter *c = s->chapters[i];
         AVDictionaryEntry *t;
 
-        int64_t end = av_rescale_q(c->end, c->time_base, (AVRational){1,MOV_TIMESCALE});
-        pkt.pts = pkt.dts = av_rescale_q(c->start, c->time_base, (AVRational){1,MOV_TIMESCALE});
+        int64_t end = av_rescale_q(c->end, c->time_base, (AVRational){1,mov->movie_timescale});
+        pkt.pts = pkt.dts = av_rescale_q(c->start, c->time_base, (AVRational){1,mov->movie_timescale});
         pkt.duration = end - pkt.dts;
 
         if ((t = av_dict_get(c->metadata, "title", NULL, 0))) {
@@ -4796,6 +4805,7 @@
         return ret;
 
     /* tmcd track based on video stream */
+    track->mov       = mov;
     track->mode      = mov->mode;
     track->tag       = MKTAG('t','m','c','d');
     track->src_track = src_index;
@@ -5112,6 +5122,7 @@
         MOVTrack *track= &mov->tracks[i];
         AVDictionaryEntry *lang = av_dict_get(st->metadata, "language", NULL,0);
 
+        track->mov = mov;
         track->st  = st;
         track->enc = st->codec;
         track->language = ff_mov_iso639_to_lang(lang?lang->value:"und", mov->mode!=MODE_MOV);
@@ -5119,6 +5130,11 @@
             track->language = 0;
         track->mode = mov->mode;
         track->tag  = mov_find_codec_tag(s, track);
+        if (!mov->vendor || strlen(mov->vendor) != 4) {
+            av_log(s, AV_LOG_ERROR, "vendor option must be exactly 4 characters long");
+            goto error;
+        }
+
         if (!track->tag) {
             av_log(s, AV_LOG_ERROR, "Could not find tag for codec %s in stream #%d, "
                    "codec not currently supported in container\n",
@@ -5200,7 +5216,7 @@
         } else if (st->codec->codec_type == AVMEDIA_TYPE_DATA) {
             track->timescale = st->time_base.den;
         } else {
-            track->timescale = MOV_TIMESCALE;
+            track->timescale = mov->movie_timescale;
         }
         if (!track->height)
             track->height = st->codec->height;
diff -r 50cd330f1558 -r e9eb0a5a27ba libavformat/movenc.h
--- a/libavformat/movenc.h	Tue Jul 18 16:08:07 2017 +0200
+++ b/libavformat/movenc.h	Tue Jul 18 16:08:08 2017 +0200
@@ -28,7 +28,7 @@
 
 #define MOV_FRAG_INFO_ALLOC_INCREMENT 64
 #define MOV_INDEX_CLUSTER_SIZE 1024
-#define MOV_TIMESCALE 1000
+#define DEFAULT_MOV_TIMESCALE 1000
 
 #define RTP_MAX_PACKET_SIZE 1450
 
@@ -77,6 +77,8 @@
     int size;
 } MOVFragmentInfo;
 
+struct MOVMuxContext;
+
 typedef struct MOVTrack {
     int         mode;
     int         entry;
@@ -99,6 +101,7 @@
     int         language;
     int         track_id;
     int         tag; ///< stsd fourcc
+    struct MOVMuxContext *mov;
     AVStream        *st;
     AVCodecContext *enc;
     int multichannel_as_mono;
@@ -179,6 +182,9 @@
     int first_trun;
 
     int video_track_timescale;
+    int movie_timescale;
+    char *vendor;
+    int target_chunk_size;
 
     int reserved_moov_size; ///< 0 for disabled, -1 for automatic, size otherwise
     int64_t reserved_header_pos;
