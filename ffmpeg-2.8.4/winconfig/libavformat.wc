# Name: libavformat
# Description: libavformat
# Version: 0.0.1

import os

def flags( env, prefix ):
	env.Append( CPPPATH = [
		os.path.join( prefix, 'include'),
		os.path.join( prefix, 'extra', 'includes' )
	] )

	env.Append( LIBPATH = [ os.path.join( prefix, 'lib') ] )
	env.Append( LIBS = [ 'avformat.lib', 'avcodec.lib', 'avutil.lib', 'avfilter.lib', 'swresample.lib' ] )

def install( env, prefix ):
	if env.debug : folder_name = 'debug'
	else : folder_name = 'release'

	if os.path.isdir( os.path.join( prefix, 'bin', folder_name ) ) :
		bin_dir = os.path.join( prefix, 'bin', folder_name )
	else :
		bin_dir =  os.path.join( prefix, 'bin' )
	
	binaries = [
		"avcodec-56.dll",
		"avdevice-56.dll",
		"avfilter-5.dll",
		"avformat-56.dll",
		"avresample-2.dll",
		"avutil-54.dll",
		"ffmpeg.exe",
		"ffplay.exe",
		"ffprobe.exe",
		"icudt56.dll",
		"icudt.dll",
		"icuin56.dll",
		"icuin.dll",
		"icuio56.dll",
		"icuio.dll",
		"icule56.dll",
		"icule.dll",
		"iculx56.dll",
		"iculx.dll",
		"icutest56.dll",
		"icutest.dll",
		"icutu56.dll",
		"icutu.dll",
		"icuuc56.dll",
		"icuuc.dll",
		"libass-5.dll",
		"libatomic-1.dll",
		"libbluray-1.dll",
		"libbs2b-0.dll",
		"libbz2.dll",
		"libcaca-0.dll",
		"libcaca++-0.dll",
		"libcairo-2.dll",
		"libcairo-gobject-2.dll",
		"libcairo-script-interpreter-2.dll",
		"libcharset-1.dll",
		"libdbus-1-3.dll",
		"libexpat-1.dll",
		"libfdk-aac-1.dll",
		"libffi-6.dll",
		"libfontconfig-1.dll",
		"libform5.dll",
		"libfreetype-6.dll",
		"libfribidi-0.dll",
		"libgcc_s_seh-1.dll",
		"libgfortran-3.dll",
		"libgio-2.0-0.dll",
		"libglib-2.0-0.dll",
		"libglut.dll",
		"libgmodule-2.0-0.dll",
		"libgmp-10.dll",
		"libgmpxx-4.dll",
		"libgnurx-0.dll",
		"libgnutls-30.dll",
		"libgnutlsxx-28.dll",
		"libgobject-2.0-0.dll",
		"libgomp-1.dll",
		"libgomp-plugin-host_nonshm-1.dll",
		"libgthread-2.0-0.dll",
		"libharfbuzz-0.dll",
		"libharfbuzz-icu-0.dll",
		"libhogweed-4.dll",
		"libiconv-2.dll",
		"libidn2-0.dll",
		"libintl-8.dll",
		"liblsmash-2.dll",
		"liblzma-5.dll",
		"liblzo2-2.dll",
		"libmenu5.dll",
		"libmp3lame-0.dll",
		"libncurses++5.dll",
		"libncurses5.dll",
		"libnettle-6.dll",
		"libogg-0.dll",
		"libopencore-amrnb-0.dll",
		"libopencore-amrwb-0.dll",
		"libopus-0.dll",
		"libpanel5.dll",
		"libpcre16-0.dll",
		"libpcre-1.dll",
		"libpcrecpp-0.dll",
		"libpcreposix-0.dll",
		"libpixman-1-0.dll",
		"libpng16-16.dll",
		"libquadmath-0.dll",
		"libregex-0.dll",
		"libspeex-1.dll",
		"libssp-0.dll",
		"libstdc++-6.dll",
		"libtheora-0.dll",
		"libtheoradec-1.dll",
		"libtheoraenc-1.dll",
		"libunistring-2.dll",
		"libvidstab.dll",
		"libvo-amrwbenc-0.dll",
		"libvorbis-0.dll",
		"libvorbisenc-2.dll",
		"libvorbisfile-3.dll",
		"libvtv-0.dll",
		"libvtv_stubs-0.dll",
		"libwinpthread-1.dll",
		"libxml2-2.dll",
		"SDL2.dll",
		"swresample-1.dll",
		"swscale-3.dll",
		"xvidcore.dll",
		"zlib1.dll"
	]

	for binary in binaries :
		env.copy_files( env[ 'stage_bin' ],  os.path.join( bin_dir, binary ) )

	if env.full_install : env.copy_files( env[ 'stage_libdir' ],  os.path.join( prefix, 'lib' ) )
	if env.full_install : env.copy_files( env[ 'stage_include' ],  os.path.join( prefix, 'include' ) )

